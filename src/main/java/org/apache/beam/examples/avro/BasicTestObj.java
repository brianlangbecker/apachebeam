/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package org.apache.beam.examples.avro;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class BasicTestObj extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 3431103796249916342L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"BasicTestObj\",\"namespace\":\"org.apache.beam.examples.avro\",\"fields\":[{\"name\":\"test_int\",\"type\":\"int\"},{\"name\":\"test_wrapped_int\",\"type\":[\"int\",\"null\"]},{\"name\":\"test_long\",\"type\":\"long\"},{\"name\":\"test_wrapped_long\",\"type\":[\"long\",\"null\"]},{\"name\":\"test_double\",\"type\":\"double\"},{\"name\":\"test_wrapped_double\",\"type\":[\"double\",\"null\"]},{\"name\":\"test_string\",\"type\":[\"string\",\"null\"]}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<BasicTestObj> ENCODER =
      new BinaryMessageEncoder<BasicTestObj>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<BasicTestObj> DECODER =
      new BinaryMessageDecoder<BasicTestObj>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<BasicTestObj> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<BasicTestObj> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<BasicTestObj> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<BasicTestObj>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this BasicTestObj to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a BasicTestObj from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a BasicTestObj instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static BasicTestObj fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

   private int test_int;
   private java.lang.Integer test_wrapped_int;
   private long test_long;
   private java.lang.Long test_wrapped_long;
   private double test_double;
   private java.lang.Double test_wrapped_double;
   private java.lang.CharSequence test_string;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public BasicTestObj() {}

  /**
   * All-args constructor.
   * @param test_int The new value for test_int
   * @param test_wrapped_int The new value for test_wrapped_int
   * @param test_long The new value for test_long
   * @param test_wrapped_long The new value for test_wrapped_long
   * @param test_double The new value for test_double
   * @param test_wrapped_double The new value for test_wrapped_double
   * @param test_string The new value for test_string
   */
  public BasicTestObj(java.lang.Integer test_int, java.lang.Integer test_wrapped_int, java.lang.Long test_long, java.lang.Long test_wrapped_long, java.lang.Double test_double, java.lang.Double test_wrapped_double, java.lang.CharSequence test_string) {
    this.test_int = test_int;
    this.test_wrapped_int = test_wrapped_int;
    this.test_long = test_long;
    this.test_wrapped_long = test_wrapped_long;
    this.test_double = test_double;
    this.test_wrapped_double = test_wrapped_double;
    this.test_string = test_string;
  }

  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return test_int;
    case 1: return test_wrapped_int;
    case 2: return test_long;
    case 3: return test_wrapped_long;
    case 4: return test_double;
    case 5: return test_wrapped_double;
    case 6: return test_string;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: test_int = (java.lang.Integer)value$; break;
    case 1: test_wrapped_int = (java.lang.Integer)value$; break;
    case 2: test_long = (java.lang.Long)value$; break;
    case 3: test_wrapped_long = (java.lang.Long)value$; break;
    case 4: test_double = (java.lang.Double)value$; break;
    case 5: test_wrapped_double = (java.lang.Double)value$; break;
    case 6: test_string = (java.lang.CharSequence)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'test_int' field.
   * @return The value of the 'test_int' field.
   */
  public int getTestInt() {
    return test_int;
  }


  /**
   * Sets the value of the 'test_int' field.
   * @param value the value to set.
   */
  public void setTestInt(int value) {
    this.test_int = value;
  }

  /**
   * Gets the value of the 'test_wrapped_int' field.
   * @return The value of the 'test_wrapped_int' field.
   */
  public java.lang.Integer getTestWrappedInt() {
    return test_wrapped_int;
  }


  /**
   * Sets the value of the 'test_wrapped_int' field.
   * @param value the value to set.
   */
  public void setTestWrappedInt(java.lang.Integer value) {
    this.test_wrapped_int = value;
  }

  /**
   * Gets the value of the 'test_long' field.
   * @return The value of the 'test_long' field.
   */
  public long getTestLong() {
    return test_long;
  }


  /**
   * Sets the value of the 'test_long' field.
   * @param value the value to set.
   */
  public void setTestLong(long value) {
    this.test_long = value;
  }

  /**
   * Gets the value of the 'test_wrapped_long' field.
   * @return The value of the 'test_wrapped_long' field.
   */
  public java.lang.Long getTestWrappedLong() {
    return test_wrapped_long;
  }


  /**
   * Sets the value of the 'test_wrapped_long' field.
   * @param value the value to set.
   */
  public void setTestWrappedLong(java.lang.Long value) {
    this.test_wrapped_long = value;
  }

  /**
   * Gets the value of the 'test_double' field.
   * @return The value of the 'test_double' field.
   */
  public double getTestDouble() {
    return test_double;
  }


  /**
   * Sets the value of the 'test_double' field.
   * @param value the value to set.
   */
  public void setTestDouble(double value) {
    this.test_double = value;
  }

  /**
   * Gets the value of the 'test_wrapped_double' field.
   * @return The value of the 'test_wrapped_double' field.
   */
  public java.lang.Double getTestWrappedDouble() {
    return test_wrapped_double;
  }


  /**
   * Sets the value of the 'test_wrapped_double' field.
   * @param value the value to set.
   */
  public void setTestWrappedDouble(java.lang.Double value) {
    this.test_wrapped_double = value;
  }

  /**
   * Gets the value of the 'test_string' field.
   * @return The value of the 'test_string' field.
   */
  public java.lang.CharSequence getTestString() {
    return test_string;
  }


  /**
   * Sets the value of the 'test_string' field.
   * @param value the value to set.
   */
  public void setTestString(java.lang.CharSequence value) {
    this.test_string = value;
  }

  /**
   * Creates a new BasicTestObj RecordBuilder.
   * @return A new BasicTestObj RecordBuilder
   */
  public static org.apache.beam.examples.avro.BasicTestObj.Builder newBuilder() {
    return new org.apache.beam.examples.avro.BasicTestObj.Builder();
  }

  /**
   * Creates a new BasicTestObj RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new BasicTestObj RecordBuilder
   */
  public static org.apache.beam.examples.avro.BasicTestObj.Builder newBuilder(org.apache.beam.examples.avro.BasicTestObj.Builder other) {
    if (other == null) {
      return new org.apache.beam.examples.avro.BasicTestObj.Builder();
    } else {
      return new org.apache.beam.examples.avro.BasicTestObj.Builder(other);
    }
  }

  /**
   * Creates a new BasicTestObj RecordBuilder by copying an existing BasicTestObj instance.
   * @param other The existing instance to copy.
   * @return A new BasicTestObj RecordBuilder
   */
  public static org.apache.beam.examples.avro.BasicTestObj.Builder newBuilder(org.apache.beam.examples.avro.BasicTestObj other) {
    if (other == null) {
      return new org.apache.beam.examples.avro.BasicTestObj.Builder();
    } else {
      return new org.apache.beam.examples.avro.BasicTestObj.Builder(other);
    }
  }

  /**
   * RecordBuilder for BasicTestObj instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<BasicTestObj>
    implements org.apache.avro.data.RecordBuilder<BasicTestObj> {

    private int test_int;
    private java.lang.Integer test_wrapped_int;
    private long test_long;
    private java.lang.Long test_wrapped_long;
    private double test_double;
    private java.lang.Double test_wrapped_double;
    private java.lang.CharSequence test_string;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(org.apache.beam.examples.avro.BasicTestObj.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.test_int)) {
        this.test_int = data().deepCopy(fields()[0].schema(), other.test_int);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.test_wrapped_int)) {
        this.test_wrapped_int = data().deepCopy(fields()[1].schema(), other.test_wrapped_int);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.test_long)) {
        this.test_long = data().deepCopy(fields()[2].schema(), other.test_long);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.test_wrapped_long)) {
        this.test_wrapped_long = data().deepCopy(fields()[3].schema(), other.test_wrapped_long);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (isValidValue(fields()[4], other.test_double)) {
        this.test_double = data().deepCopy(fields()[4].schema(), other.test_double);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
      if (isValidValue(fields()[5], other.test_wrapped_double)) {
        this.test_wrapped_double = data().deepCopy(fields()[5].schema(), other.test_wrapped_double);
        fieldSetFlags()[5] = other.fieldSetFlags()[5];
      }
      if (isValidValue(fields()[6], other.test_string)) {
        this.test_string = data().deepCopy(fields()[6].schema(), other.test_string);
        fieldSetFlags()[6] = other.fieldSetFlags()[6];
      }
    }

    /**
     * Creates a Builder by copying an existing BasicTestObj instance
     * @param other The existing instance to copy.
     */
    private Builder(org.apache.beam.examples.avro.BasicTestObj other) {
      super(SCHEMA$);
      if (isValidValue(fields()[0], other.test_int)) {
        this.test_int = data().deepCopy(fields()[0].schema(), other.test_int);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.test_wrapped_int)) {
        this.test_wrapped_int = data().deepCopy(fields()[1].schema(), other.test_wrapped_int);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.test_long)) {
        this.test_long = data().deepCopy(fields()[2].schema(), other.test_long);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.test_wrapped_long)) {
        this.test_wrapped_long = data().deepCopy(fields()[3].schema(), other.test_wrapped_long);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.test_double)) {
        this.test_double = data().deepCopy(fields()[4].schema(), other.test_double);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.test_wrapped_double)) {
        this.test_wrapped_double = data().deepCopy(fields()[5].schema(), other.test_wrapped_double);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.test_string)) {
        this.test_string = data().deepCopy(fields()[6].schema(), other.test_string);
        fieldSetFlags()[6] = true;
      }
    }

    /**
      * Gets the value of the 'test_int' field.
      * @return The value.
      */
    public int getTestInt() {
      return test_int;
    }


    /**
      * Sets the value of the 'test_int' field.
      * @param value The value of 'test_int'.
      * @return This builder.
      */
    public org.apache.beam.examples.avro.BasicTestObj.Builder setTestInt(int value) {
      validate(fields()[0], value);
      this.test_int = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'test_int' field has been set.
      * @return True if the 'test_int' field has been set, false otherwise.
      */
    public boolean hasTestInt() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'test_int' field.
      * @return This builder.
      */
    public org.apache.beam.examples.avro.BasicTestObj.Builder clearTestInt() {
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'test_wrapped_int' field.
      * @return The value.
      */
    public java.lang.Integer getTestWrappedInt() {
      return test_wrapped_int;
    }


    /**
      * Sets the value of the 'test_wrapped_int' field.
      * @param value The value of 'test_wrapped_int'.
      * @return This builder.
      */
    public org.apache.beam.examples.avro.BasicTestObj.Builder setTestWrappedInt(java.lang.Integer value) {
      validate(fields()[1], value);
      this.test_wrapped_int = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'test_wrapped_int' field has been set.
      * @return True if the 'test_wrapped_int' field has been set, false otherwise.
      */
    public boolean hasTestWrappedInt() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'test_wrapped_int' field.
      * @return This builder.
      */
    public org.apache.beam.examples.avro.BasicTestObj.Builder clearTestWrappedInt() {
      test_wrapped_int = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'test_long' field.
      * @return The value.
      */
    public long getTestLong() {
      return test_long;
    }


    /**
      * Sets the value of the 'test_long' field.
      * @param value The value of 'test_long'.
      * @return This builder.
      */
    public org.apache.beam.examples.avro.BasicTestObj.Builder setTestLong(long value) {
      validate(fields()[2], value);
      this.test_long = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'test_long' field has been set.
      * @return True if the 'test_long' field has been set, false otherwise.
      */
    public boolean hasTestLong() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'test_long' field.
      * @return This builder.
      */
    public org.apache.beam.examples.avro.BasicTestObj.Builder clearTestLong() {
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'test_wrapped_long' field.
      * @return The value.
      */
    public java.lang.Long getTestWrappedLong() {
      return test_wrapped_long;
    }


    /**
      * Sets the value of the 'test_wrapped_long' field.
      * @param value The value of 'test_wrapped_long'.
      * @return This builder.
      */
    public org.apache.beam.examples.avro.BasicTestObj.Builder setTestWrappedLong(java.lang.Long value) {
      validate(fields()[3], value);
      this.test_wrapped_long = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'test_wrapped_long' field has been set.
      * @return True if the 'test_wrapped_long' field has been set, false otherwise.
      */
    public boolean hasTestWrappedLong() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'test_wrapped_long' field.
      * @return This builder.
      */
    public org.apache.beam.examples.avro.BasicTestObj.Builder clearTestWrappedLong() {
      test_wrapped_long = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'test_double' field.
      * @return The value.
      */
    public double getTestDouble() {
      return test_double;
    }


    /**
      * Sets the value of the 'test_double' field.
      * @param value The value of 'test_double'.
      * @return This builder.
      */
    public org.apache.beam.examples.avro.BasicTestObj.Builder setTestDouble(double value) {
      validate(fields()[4], value);
      this.test_double = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'test_double' field has been set.
      * @return True if the 'test_double' field has been set, false otherwise.
      */
    public boolean hasTestDouble() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'test_double' field.
      * @return This builder.
      */
    public org.apache.beam.examples.avro.BasicTestObj.Builder clearTestDouble() {
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'test_wrapped_double' field.
      * @return The value.
      */
    public java.lang.Double getTestWrappedDouble() {
      return test_wrapped_double;
    }


    /**
      * Sets the value of the 'test_wrapped_double' field.
      * @param value The value of 'test_wrapped_double'.
      * @return This builder.
      */
    public org.apache.beam.examples.avro.BasicTestObj.Builder setTestWrappedDouble(java.lang.Double value) {
      validate(fields()[5], value);
      this.test_wrapped_double = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'test_wrapped_double' field has been set.
      * @return True if the 'test_wrapped_double' field has been set, false otherwise.
      */
    public boolean hasTestWrappedDouble() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'test_wrapped_double' field.
      * @return This builder.
      */
    public org.apache.beam.examples.avro.BasicTestObj.Builder clearTestWrappedDouble() {
      test_wrapped_double = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'test_string' field.
      * @return The value.
      */
    public java.lang.CharSequence getTestString() {
      return test_string;
    }


    /**
      * Sets the value of the 'test_string' field.
      * @param value The value of 'test_string'.
      * @return This builder.
      */
    public org.apache.beam.examples.avro.BasicTestObj.Builder setTestString(java.lang.CharSequence value) {
      validate(fields()[6], value);
      this.test_string = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'test_string' field has been set.
      * @return True if the 'test_string' field has been set, false otherwise.
      */
    public boolean hasTestString() {
      return fieldSetFlags()[6];
    }


    /**
      * Clears the value of the 'test_string' field.
      * @return This builder.
      */
    public org.apache.beam.examples.avro.BasicTestObj.Builder clearTestString() {
      test_string = null;
      fieldSetFlags()[6] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public BasicTestObj build() {
      try {
        BasicTestObj record = new BasicTestObj();
        record.test_int = fieldSetFlags()[0] ? this.test_int : (java.lang.Integer) defaultValue(fields()[0]);
        record.test_wrapped_int = fieldSetFlags()[1] ? this.test_wrapped_int : (java.lang.Integer) defaultValue(fields()[1]);
        record.test_long = fieldSetFlags()[2] ? this.test_long : (java.lang.Long) defaultValue(fields()[2]);
        record.test_wrapped_long = fieldSetFlags()[3] ? this.test_wrapped_long : (java.lang.Long) defaultValue(fields()[3]);
        record.test_double = fieldSetFlags()[4] ? this.test_double : (java.lang.Double) defaultValue(fields()[4]);
        record.test_wrapped_double = fieldSetFlags()[5] ? this.test_wrapped_double : (java.lang.Double) defaultValue(fields()[5]);
        record.test_string = fieldSetFlags()[6] ? this.test_string : (java.lang.CharSequence) defaultValue(fields()[6]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<BasicTestObj>
    WRITER$ = (org.apache.avro.io.DatumWriter<BasicTestObj>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<BasicTestObj>
    READER$ = (org.apache.avro.io.DatumReader<BasicTestObj>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    out.writeInt(this.test_int);

    if (this.test_wrapped_int == null) {
      out.writeIndex(1);
      out.writeNull();
    } else {
      out.writeIndex(0);
      out.writeInt(this.test_wrapped_int);
    }

    out.writeLong(this.test_long);

    if (this.test_wrapped_long == null) {
      out.writeIndex(1);
      out.writeNull();
    } else {
      out.writeIndex(0);
      out.writeLong(this.test_wrapped_long);
    }

    out.writeDouble(this.test_double);

    if (this.test_wrapped_double == null) {
      out.writeIndex(1);
      out.writeNull();
    } else {
      out.writeIndex(0);
      out.writeDouble(this.test_wrapped_double);
    }

    if (this.test_string == null) {
      out.writeIndex(1);
      out.writeNull();
    } else {
      out.writeIndex(0);
      out.writeString(this.test_string);
    }

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      this.test_int = in.readInt();

      if (in.readIndex() != 0) {
        in.readNull();
        this.test_wrapped_int = null;
      } else {
        this.test_wrapped_int = in.readInt();
      }

      this.test_long = in.readLong();

      if (in.readIndex() != 0) {
        in.readNull();
        this.test_wrapped_long = null;
      } else {
        this.test_wrapped_long = in.readLong();
      }

      this.test_double = in.readDouble();

      if (in.readIndex() != 0) {
        in.readNull();
        this.test_wrapped_double = null;
      } else {
        this.test_wrapped_double = in.readDouble();
      }

      if (in.readIndex() != 0) {
        in.readNull();
        this.test_string = null;
      } else {
        this.test_string = in.readString(this.test_string instanceof Utf8 ? (Utf8)this.test_string : null);
      }

    } else {
      for (int i = 0; i < 7; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          this.test_int = in.readInt();
          break;

        case 1:
          if (in.readIndex() != 0) {
            in.readNull();
            this.test_wrapped_int = null;
          } else {
            this.test_wrapped_int = in.readInt();
          }
          break;

        case 2:
          this.test_long = in.readLong();
          break;

        case 3:
          if (in.readIndex() != 0) {
            in.readNull();
            this.test_wrapped_long = null;
          } else {
            this.test_wrapped_long = in.readLong();
          }
          break;

        case 4:
          this.test_double = in.readDouble();
          break;

        case 5:
          if (in.readIndex() != 0) {
            in.readNull();
            this.test_wrapped_double = null;
          } else {
            this.test_wrapped_double = in.readDouble();
          }
          break;

        case 6:
          if (in.readIndex() != 0) {
            in.readNull();
            this.test_string = null;
          } else {
            this.test_string = in.readString(this.test_string instanceof Utf8 ? (Utf8)this.test_string : null);
          }
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










