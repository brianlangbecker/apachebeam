/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package org.apache.beam.examples.avro;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class TestObj extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 3086019903940108368L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"TestObj\",\"namespace\":\"org.apache.beam.examples.avro\",\"fields\":[{\"name\":\"test_int\",\"type\":\"int\"},{\"name\":\"test_wrapped_int\",\"type\":[\"int\",\"null\"]},{\"name\":\"test_long\",\"type\":\"long\"},{\"name\":\"test_wrapped_long\",\"type\":[\"long\",\"null\"]},{\"name\":\"test_double\",\"type\":\"double\"},{\"name\":\"test_wrapped_double\",\"type\":[\"double\",\"null\"]},{\"name\":\"test_string\",\"type\":[\"string\",\"null\"]},{\"name\":\"test_simple_list\",\"type\":{\"type\":\"array\",\"items\":[\"string\",\"null\"]}},{\"name\":\"test_complex_list\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"NestedObj\",\"fields\":[{\"name\":\"nested_int\",\"type\":\"int\"},{\"name\":\"nested_string\",\"type\":[\"string\",\"null\"]}]}}},{\"name\":\"test_simple_map\",\"type\":{\"type\":\"map\",\"values\":\"int\"}},{\"name\":\"test_complex_map\",\"type\":{\"type\":\"map\",\"values\":\"NestedObj\"}}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<TestObj> ENCODER =
      new BinaryMessageEncoder<TestObj>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<TestObj> DECODER =
      new BinaryMessageDecoder<TestObj>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<TestObj> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<TestObj> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<TestObj> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<TestObj>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this TestObj to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a TestObj from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a TestObj instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static TestObj fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

   private int test_int;
   private java.lang.Integer test_wrapped_int;
   private long test_long;
   private java.lang.Long test_wrapped_long;
   private double test_double;
   private java.lang.Double test_wrapped_double;
   private java.lang.CharSequence test_string;
   private java.util.List<java.lang.CharSequence> test_simple_list;
   private java.util.List<org.apache.beam.examples.avro.NestedObj> test_complex_list;
   private java.util.Map<java.lang.CharSequence,java.lang.Integer> test_simple_map;
   private java.util.Map<java.lang.CharSequence,org.apache.beam.examples.avro.NestedObj> test_complex_map;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public TestObj() {}

  /**
   * All-args constructor.
   * @param test_int The new value for test_int
   * @param test_wrapped_int The new value for test_wrapped_int
   * @param test_long The new value for test_long
   * @param test_wrapped_long The new value for test_wrapped_long
   * @param test_double The new value for test_double
   * @param test_wrapped_double The new value for test_wrapped_double
   * @param test_string The new value for test_string
   * @param test_simple_list The new value for test_simple_list
   * @param test_complex_list The new value for test_complex_list
   * @param test_simple_map The new value for test_simple_map
   * @param test_complex_map The new value for test_complex_map
   */
  public TestObj(java.lang.Integer test_int, java.lang.Integer test_wrapped_int, java.lang.Long test_long, java.lang.Long test_wrapped_long, java.lang.Double test_double, java.lang.Double test_wrapped_double, java.lang.CharSequence test_string, java.util.List<java.lang.CharSequence> test_simple_list, java.util.List<org.apache.beam.examples.avro.NestedObj> test_complex_list, java.util.Map<java.lang.CharSequence,java.lang.Integer> test_simple_map, java.util.Map<java.lang.CharSequence,org.apache.beam.examples.avro.NestedObj> test_complex_map) {
    this.test_int = test_int;
    this.test_wrapped_int = test_wrapped_int;
    this.test_long = test_long;
    this.test_wrapped_long = test_wrapped_long;
    this.test_double = test_double;
    this.test_wrapped_double = test_wrapped_double;
    this.test_string = test_string;
    this.test_simple_list = test_simple_list;
    this.test_complex_list = test_complex_list;
    this.test_simple_map = test_simple_map;
    this.test_complex_map = test_complex_map;
  }

  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return test_int;
    case 1: return test_wrapped_int;
    case 2: return test_long;
    case 3: return test_wrapped_long;
    case 4: return test_double;
    case 5: return test_wrapped_double;
    case 6: return test_string;
    case 7: return test_simple_list;
    case 8: return test_complex_list;
    case 9: return test_simple_map;
    case 10: return test_complex_map;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: test_int = (java.lang.Integer)value$; break;
    case 1: test_wrapped_int = (java.lang.Integer)value$; break;
    case 2: test_long = (java.lang.Long)value$; break;
    case 3: test_wrapped_long = (java.lang.Long)value$; break;
    case 4: test_double = (java.lang.Double)value$; break;
    case 5: test_wrapped_double = (java.lang.Double)value$; break;
    case 6: test_string = (java.lang.CharSequence)value$; break;
    case 7: test_simple_list = (java.util.List<java.lang.CharSequence>)value$; break;
    case 8: test_complex_list = (java.util.List<org.apache.beam.examples.avro.NestedObj>)value$; break;
    case 9: test_simple_map = (java.util.Map<java.lang.CharSequence,java.lang.Integer>)value$; break;
    case 10: test_complex_map = (java.util.Map<java.lang.CharSequence,org.apache.beam.examples.avro.NestedObj>)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'test_int' field.
   * @return The value of the 'test_int' field.
   */
  public int getTestInt() {
    return test_int;
  }


  /**
   * Sets the value of the 'test_int' field.
   * @param value the value to set.
   */
  public void setTestInt(int value) {
    this.test_int = value;
  }

  /**
   * Gets the value of the 'test_wrapped_int' field.
   * @return The value of the 'test_wrapped_int' field.
   */
  public java.lang.Integer getTestWrappedInt() {
    return test_wrapped_int;
  }


  /**
   * Sets the value of the 'test_wrapped_int' field.
   * @param value the value to set.
   */
  public void setTestWrappedInt(java.lang.Integer value) {
    this.test_wrapped_int = value;
  }

  /**
   * Gets the value of the 'test_long' field.
   * @return The value of the 'test_long' field.
   */
  public long getTestLong() {
    return test_long;
  }


  /**
   * Sets the value of the 'test_long' field.
   * @param value the value to set.
   */
  public void setTestLong(long value) {
    this.test_long = value;
  }

  /**
   * Gets the value of the 'test_wrapped_long' field.
   * @return The value of the 'test_wrapped_long' field.
   */
  public java.lang.Long getTestWrappedLong() {
    return test_wrapped_long;
  }


  /**
   * Sets the value of the 'test_wrapped_long' field.
   * @param value the value to set.
   */
  public void setTestWrappedLong(java.lang.Long value) {
    this.test_wrapped_long = value;
  }

  /**
   * Gets the value of the 'test_double' field.
   * @return The value of the 'test_double' field.
   */
  public double getTestDouble() {
    return test_double;
  }


  /**
   * Sets the value of the 'test_double' field.
   * @param value the value to set.
   */
  public void setTestDouble(double value) {
    this.test_double = value;
  }

  /**
   * Gets the value of the 'test_wrapped_double' field.
   * @return The value of the 'test_wrapped_double' field.
   */
  public java.lang.Double getTestWrappedDouble() {
    return test_wrapped_double;
  }


  /**
   * Sets the value of the 'test_wrapped_double' field.
   * @param value the value to set.
   */
  public void setTestWrappedDouble(java.lang.Double value) {
    this.test_wrapped_double = value;
  }

  /**
   * Gets the value of the 'test_string' field.
   * @return The value of the 'test_string' field.
   */
  public java.lang.CharSequence getTestString() {
    return test_string;
  }


  /**
   * Sets the value of the 'test_string' field.
   * @param value the value to set.
   */
  public void setTestString(java.lang.CharSequence value) {
    this.test_string = value;
  }

  /**
   * Gets the value of the 'test_simple_list' field.
   * @return The value of the 'test_simple_list' field.
   */
  public java.util.List<java.lang.CharSequence> getTestSimpleList() {
    return test_simple_list;
  }


  /**
   * Sets the value of the 'test_simple_list' field.
   * @param value the value to set.
   */
  public void setTestSimpleList(java.util.List<java.lang.CharSequence> value) {
    this.test_simple_list = value;
  }

  /**
   * Gets the value of the 'test_complex_list' field.
   * @return The value of the 'test_complex_list' field.
   */
  public java.util.List<org.apache.beam.examples.avro.NestedObj> getTestComplexList() {
    return test_complex_list;
  }


  /**
   * Sets the value of the 'test_complex_list' field.
   * @param value the value to set.
   */
  public void setTestComplexList(java.util.List<org.apache.beam.examples.avro.NestedObj> value) {
    this.test_complex_list = value;
  }

  /**
   * Gets the value of the 'test_simple_map' field.
   * @return The value of the 'test_simple_map' field.
   */
  public java.util.Map<java.lang.CharSequence,java.lang.Integer> getTestSimpleMap() {
    return test_simple_map;
  }


  /**
   * Sets the value of the 'test_simple_map' field.
   * @param value the value to set.
   */
  public void setTestSimpleMap(java.util.Map<java.lang.CharSequence,java.lang.Integer> value) {
    this.test_simple_map = value;
  }

  /**
   * Gets the value of the 'test_complex_map' field.
   * @return The value of the 'test_complex_map' field.
   */
  public java.util.Map<java.lang.CharSequence,org.apache.beam.examples.avro.NestedObj> getTestComplexMap() {
    return test_complex_map;
  }


  /**
   * Sets the value of the 'test_complex_map' field.
   * @param value the value to set.
   */
  public void setTestComplexMap(java.util.Map<java.lang.CharSequence,org.apache.beam.examples.avro.NestedObj> value) {
    this.test_complex_map = value;
  }

  /**
   * Creates a new TestObj RecordBuilder.
   * @return A new TestObj RecordBuilder
   */
  public static org.apache.beam.examples.avro.TestObj.Builder newBuilder() {
    return new org.apache.beam.examples.avro.TestObj.Builder();
  }

  /**
   * Creates a new TestObj RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new TestObj RecordBuilder
   */
  public static org.apache.beam.examples.avro.TestObj.Builder newBuilder(org.apache.beam.examples.avro.TestObj.Builder other) {
    if (other == null) {
      return new org.apache.beam.examples.avro.TestObj.Builder();
    } else {
      return new org.apache.beam.examples.avro.TestObj.Builder(other);
    }
  }

  /**
   * Creates a new TestObj RecordBuilder by copying an existing TestObj instance.
   * @param other The existing instance to copy.
   * @return A new TestObj RecordBuilder
   */
  public static org.apache.beam.examples.avro.TestObj.Builder newBuilder(org.apache.beam.examples.avro.TestObj other) {
    if (other == null) {
      return new org.apache.beam.examples.avro.TestObj.Builder();
    } else {
      return new org.apache.beam.examples.avro.TestObj.Builder(other);
    }
  }

  /**
   * RecordBuilder for TestObj instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<TestObj>
    implements org.apache.avro.data.RecordBuilder<TestObj> {

    private int test_int;
    private java.lang.Integer test_wrapped_int;
    private long test_long;
    private java.lang.Long test_wrapped_long;
    private double test_double;
    private java.lang.Double test_wrapped_double;
    private java.lang.CharSequence test_string;
    private java.util.List<java.lang.CharSequence> test_simple_list;
    private java.util.List<org.apache.beam.examples.avro.NestedObj> test_complex_list;
    private java.util.Map<java.lang.CharSequence,java.lang.Integer> test_simple_map;
    private java.util.Map<java.lang.CharSequence,org.apache.beam.examples.avro.NestedObj> test_complex_map;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(org.apache.beam.examples.avro.TestObj.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.test_int)) {
        this.test_int = data().deepCopy(fields()[0].schema(), other.test_int);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.test_wrapped_int)) {
        this.test_wrapped_int = data().deepCopy(fields()[1].schema(), other.test_wrapped_int);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.test_long)) {
        this.test_long = data().deepCopy(fields()[2].schema(), other.test_long);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.test_wrapped_long)) {
        this.test_wrapped_long = data().deepCopy(fields()[3].schema(), other.test_wrapped_long);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (isValidValue(fields()[4], other.test_double)) {
        this.test_double = data().deepCopy(fields()[4].schema(), other.test_double);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
      if (isValidValue(fields()[5], other.test_wrapped_double)) {
        this.test_wrapped_double = data().deepCopy(fields()[5].schema(), other.test_wrapped_double);
        fieldSetFlags()[5] = other.fieldSetFlags()[5];
      }
      if (isValidValue(fields()[6], other.test_string)) {
        this.test_string = data().deepCopy(fields()[6].schema(), other.test_string);
        fieldSetFlags()[6] = other.fieldSetFlags()[6];
      }
      if (isValidValue(fields()[7], other.test_simple_list)) {
        this.test_simple_list = data().deepCopy(fields()[7].schema(), other.test_simple_list);
        fieldSetFlags()[7] = other.fieldSetFlags()[7];
      }
      if (isValidValue(fields()[8], other.test_complex_list)) {
        this.test_complex_list = data().deepCopy(fields()[8].schema(), other.test_complex_list);
        fieldSetFlags()[8] = other.fieldSetFlags()[8];
      }
      if (isValidValue(fields()[9], other.test_simple_map)) {
        this.test_simple_map = data().deepCopy(fields()[9].schema(), other.test_simple_map);
        fieldSetFlags()[9] = other.fieldSetFlags()[9];
      }
      if (isValidValue(fields()[10], other.test_complex_map)) {
        this.test_complex_map = data().deepCopy(fields()[10].schema(), other.test_complex_map);
        fieldSetFlags()[10] = other.fieldSetFlags()[10];
      }
    }

    /**
     * Creates a Builder by copying an existing TestObj instance
     * @param other The existing instance to copy.
     */
    private Builder(org.apache.beam.examples.avro.TestObj other) {
      super(SCHEMA$);
      if (isValidValue(fields()[0], other.test_int)) {
        this.test_int = data().deepCopy(fields()[0].schema(), other.test_int);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.test_wrapped_int)) {
        this.test_wrapped_int = data().deepCopy(fields()[1].schema(), other.test_wrapped_int);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.test_long)) {
        this.test_long = data().deepCopy(fields()[2].schema(), other.test_long);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.test_wrapped_long)) {
        this.test_wrapped_long = data().deepCopy(fields()[3].schema(), other.test_wrapped_long);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.test_double)) {
        this.test_double = data().deepCopy(fields()[4].schema(), other.test_double);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.test_wrapped_double)) {
        this.test_wrapped_double = data().deepCopy(fields()[5].schema(), other.test_wrapped_double);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.test_string)) {
        this.test_string = data().deepCopy(fields()[6].schema(), other.test_string);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.test_simple_list)) {
        this.test_simple_list = data().deepCopy(fields()[7].schema(), other.test_simple_list);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.test_complex_list)) {
        this.test_complex_list = data().deepCopy(fields()[8].schema(), other.test_complex_list);
        fieldSetFlags()[8] = true;
      }
      if (isValidValue(fields()[9], other.test_simple_map)) {
        this.test_simple_map = data().deepCopy(fields()[9].schema(), other.test_simple_map);
        fieldSetFlags()[9] = true;
      }
      if (isValidValue(fields()[10], other.test_complex_map)) {
        this.test_complex_map = data().deepCopy(fields()[10].schema(), other.test_complex_map);
        fieldSetFlags()[10] = true;
      }
    }

    /**
      * Gets the value of the 'test_int' field.
      * @return The value.
      */
    public int getTestInt() {
      return test_int;
    }


    /**
      * Sets the value of the 'test_int' field.
      * @param value The value of 'test_int'.
      * @return This builder.
      */
    public org.apache.beam.examples.avro.TestObj.Builder setTestInt(int value) {
      validate(fields()[0], value);
      this.test_int = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'test_int' field has been set.
      * @return True if the 'test_int' field has been set, false otherwise.
      */
    public boolean hasTestInt() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'test_int' field.
      * @return This builder.
      */
    public org.apache.beam.examples.avro.TestObj.Builder clearTestInt() {
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'test_wrapped_int' field.
      * @return The value.
      */
    public java.lang.Integer getTestWrappedInt() {
      return test_wrapped_int;
    }


    /**
      * Sets the value of the 'test_wrapped_int' field.
      * @param value The value of 'test_wrapped_int'.
      * @return This builder.
      */
    public org.apache.beam.examples.avro.TestObj.Builder setTestWrappedInt(java.lang.Integer value) {
      validate(fields()[1], value);
      this.test_wrapped_int = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'test_wrapped_int' field has been set.
      * @return True if the 'test_wrapped_int' field has been set, false otherwise.
      */
    public boolean hasTestWrappedInt() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'test_wrapped_int' field.
      * @return This builder.
      */
    public org.apache.beam.examples.avro.TestObj.Builder clearTestWrappedInt() {
      test_wrapped_int = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'test_long' field.
      * @return The value.
      */
    public long getTestLong() {
      return test_long;
    }


    /**
      * Sets the value of the 'test_long' field.
      * @param value The value of 'test_long'.
      * @return This builder.
      */
    public org.apache.beam.examples.avro.TestObj.Builder setTestLong(long value) {
      validate(fields()[2], value);
      this.test_long = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'test_long' field has been set.
      * @return True if the 'test_long' field has been set, false otherwise.
      */
    public boolean hasTestLong() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'test_long' field.
      * @return This builder.
      */
    public org.apache.beam.examples.avro.TestObj.Builder clearTestLong() {
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'test_wrapped_long' field.
      * @return The value.
      */
    public java.lang.Long getTestWrappedLong() {
      return test_wrapped_long;
    }


    /**
      * Sets the value of the 'test_wrapped_long' field.
      * @param value The value of 'test_wrapped_long'.
      * @return This builder.
      */
    public org.apache.beam.examples.avro.TestObj.Builder setTestWrappedLong(java.lang.Long value) {
      validate(fields()[3], value);
      this.test_wrapped_long = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'test_wrapped_long' field has been set.
      * @return True if the 'test_wrapped_long' field has been set, false otherwise.
      */
    public boolean hasTestWrappedLong() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'test_wrapped_long' field.
      * @return This builder.
      */
    public org.apache.beam.examples.avro.TestObj.Builder clearTestWrappedLong() {
      test_wrapped_long = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'test_double' field.
      * @return The value.
      */
    public double getTestDouble() {
      return test_double;
    }


    /**
      * Sets the value of the 'test_double' field.
      * @param value The value of 'test_double'.
      * @return This builder.
      */
    public org.apache.beam.examples.avro.TestObj.Builder setTestDouble(double value) {
      validate(fields()[4], value);
      this.test_double = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'test_double' field has been set.
      * @return True if the 'test_double' field has been set, false otherwise.
      */
    public boolean hasTestDouble() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'test_double' field.
      * @return This builder.
      */
    public org.apache.beam.examples.avro.TestObj.Builder clearTestDouble() {
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'test_wrapped_double' field.
      * @return The value.
      */
    public java.lang.Double getTestWrappedDouble() {
      return test_wrapped_double;
    }


    /**
      * Sets the value of the 'test_wrapped_double' field.
      * @param value The value of 'test_wrapped_double'.
      * @return This builder.
      */
    public org.apache.beam.examples.avro.TestObj.Builder setTestWrappedDouble(java.lang.Double value) {
      validate(fields()[5], value);
      this.test_wrapped_double = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'test_wrapped_double' field has been set.
      * @return True if the 'test_wrapped_double' field has been set, false otherwise.
      */
    public boolean hasTestWrappedDouble() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'test_wrapped_double' field.
      * @return This builder.
      */
    public org.apache.beam.examples.avro.TestObj.Builder clearTestWrappedDouble() {
      test_wrapped_double = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'test_string' field.
      * @return The value.
      */
    public java.lang.CharSequence getTestString() {
      return test_string;
    }


    /**
      * Sets the value of the 'test_string' field.
      * @param value The value of 'test_string'.
      * @return This builder.
      */
    public org.apache.beam.examples.avro.TestObj.Builder setTestString(java.lang.CharSequence value) {
      validate(fields()[6], value);
      this.test_string = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'test_string' field has been set.
      * @return True if the 'test_string' field has been set, false otherwise.
      */
    public boolean hasTestString() {
      return fieldSetFlags()[6];
    }


    /**
      * Clears the value of the 'test_string' field.
      * @return This builder.
      */
    public org.apache.beam.examples.avro.TestObj.Builder clearTestString() {
      test_string = null;
      fieldSetFlags()[6] = false;
      return this;
    }

    /**
      * Gets the value of the 'test_simple_list' field.
      * @return The value.
      */
    public java.util.List<java.lang.CharSequence> getTestSimpleList() {
      return test_simple_list;
    }


    /**
      * Sets the value of the 'test_simple_list' field.
      * @param value The value of 'test_simple_list'.
      * @return This builder.
      */
    public org.apache.beam.examples.avro.TestObj.Builder setTestSimpleList(java.util.List<java.lang.CharSequence> value) {
      validate(fields()[7], value);
      this.test_simple_list = value;
      fieldSetFlags()[7] = true;
      return this;
    }

    /**
      * Checks whether the 'test_simple_list' field has been set.
      * @return True if the 'test_simple_list' field has been set, false otherwise.
      */
    public boolean hasTestSimpleList() {
      return fieldSetFlags()[7];
    }


    /**
      * Clears the value of the 'test_simple_list' field.
      * @return This builder.
      */
    public org.apache.beam.examples.avro.TestObj.Builder clearTestSimpleList() {
      test_simple_list = null;
      fieldSetFlags()[7] = false;
      return this;
    }

    /**
      * Gets the value of the 'test_complex_list' field.
      * @return The value.
      */
    public java.util.List<org.apache.beam.examples.avro.NestedObj> getTestComplexList() {
      return test_complex_list;
    }


    /**
      * Sets the value of the 'test_complex_list' field.
      * @param value The value of 'test_complex_list'.
      * @return This builder.
      */
    public org.apache.beam.examples.avro.TestObj.Builder setTestComplexList(java.util.List<org.apache.beam.examples.avro.NestedObj> value) {
      validate(fields()[8], value);
      this.test_complex_list = value;
      fieldSetFlags()[8] = true;
      return this;
    }

    /**
      * Checks whether the 'test_complex_list' field has been set.
      * @return True if the 'test_complex_list' field has been set, false otherwise.
      */
    public boolean hasTestComplexList() {
      return fieldSetFlags()[8];
    }


    /**
      * Clears the value of the 'test_complex_list' field.
      * @return This builder.
      */
    public org.apache.beam.examples.avro.TestObj.Builder clearTestComplexList() {
      test_complex_list = null;
      fieldSetFlags()[8] = false;
      return this;
    }

    /**
      * Gets the value of the 'test_simple_map' field.
      * @return The value.
      */
    public java.util.Map<java.lang.CharSequence,java.lang.Integer> getTestSimpleMap() {
      return test_simple_map;
    }


    /**
      * Sets the value of the 'test_simple_map' field.
      * @param value The value of 'test_simple_map'.
      * @return This builder.
      */
    public org.apache.beam.examples.avro.TestObj.Builder setTestSimpleMap(java.util.Map<java.lang.CharSequence,java.lang.Integer> value) {
      validate(fields()[9], value);
      this.test_simple_map = value;
      fieldSetFlags()[9] = true;
      return this;
    }

    /**
      * Checks whether the 'test_simple_map' field has been set.
      * @return True if the 'test_simple_map' field has been set, false otherwise.
      */
    public boolean hasTestSimpleMap() {
      return fieldSetFlags()[9];
    }


    /**
      * Clears the value of the 'test_simple_map' field.
      * @return This builder.
      */
    public org.apache.beam.examples.avro.TestObj.Builder clearTestSimpleMap() {
      test_simple_map = null;
      fieldSetFlags()[9] = false;
      return this;
    }

    /**
      * Gets the value of the 'test_complex_map' field.
      * @return The value.
      */
    public java.util.Map<java.lang.CharSequence,org.apache.beam.examples.avro.NestedObj> getTestComplexMap() {
      return test_complex_map;
    }


    /**
      * Sets the value of the 'test_complex_map' field.
      * @param value The value of 'test_complex_map'.
      * @return This builder.
      */
    public org.apache.beam.examples.avro.TestObj.Builder setTestComplexMap(java.util.Map<java.lang.CharSequence,org.apache.beam.examples.avro.NestedObj> value) {
      validate(fields()[10], value);
      this.test_complex_map = value;
      fieldSetFlags()[10] = true;
      return this;
    }

    /**
      * Checks whether the 'test_complex_map' field has been set.
      * @return True if the 'test_complex_map' field has been set, false otherwise.
      */
    public boolean hasTestComplexMap() {
      return fieldSetFlags()[10];
    }


    /**
      * Clears the value of the 'test_complex_map' field.
      * @return This builder.
      */
    public org.apache.beam.examples.avro.TestObj.Builder clearTestComplexMap() {
      test_complex_map = null;
      fieldSetFlags()[10] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public TestObj build() {
      try {
        TestObj record = new TestObj();
        record.test_int = fieldSetFlags()[0] ? this.test_int : (java.lang.Integer) defaultValue(fields()[0]);
        record.test_wrapped_int = fieldSetFlags()[1] ? this.test_wrapped_int : (java.lang.Integer) defaultValue(fields()[1]);
        record.test_long = fieldSetFlags()[2] ? this.test_long : (java.lang.Long) defaultValue(fields()[2]);
        record.test_wrapped_long = fieldSetFlags()[3] ? this.test_wrapped_long : (java.lang.Long) defaultValue(fields()[3]);
        record.test_double = fieldSetFlags()[4] ? this.test_double : (java.lang.Double) defaultValue(fields()[4]);
        record.test_wrapped_double = fieldSetFlags()[5] ? this.test_wrapped_double : (java.lang.Double) defaultValue(fields()[5]);
        record.test_string = fieldSetFlags()[6] ? this.test_string : (java.lang.CharSequence) defaultValue(fields()[6]);
        record.test_simple_list = fieldSetFlags()[7] ? this.test_simple_list : (java.util.List<java.lang.CharSequence>) defaultValue(fields()[7]);
        record.test_complex_list = fieldSetFlags()[8] ? this.test_complex_list : (java.util.List<org.apache.beam.examples.avro.NestedObj>) defaultValue(fields()[8]);
        record.test_simple_map = fieldSetFlags()[9] ? this.test_simple_map : (java.util.Map<java.lang.CharSequence,java.lang.Integer>) defaultValue(fields()[9]);
        record.test_complex_map = fieldSetFlags()[10] ? this.test_complex_map : (java.util.Map<java.lang.CharSequence,org.apache.beam.examples.avro.NestedObj>) defaultValue(fields()[10]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<TestObj>
    WRITER$ = (org.apache.avro.io.DatumWriter<TestObj>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<TestObj>
    READER$ = (org.apache.avro.io.DatumReader<TestObj>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    out.writeInt(this.test_int);

    if (this.test_wrapped_int == null) {
      out.writeIndex(1);
      out.writeNull();
    } else {
      out.writeIndex(0);
      out.writeInt(this.test_wrapped_int);
    }

    out.writeLong(this.test_long);

    if (this.test_wrapped_long == null) {
      out.writeIndex(1);
      out.writeNull();
    } else {
      out.writeIndex(0);
      out.writeLong(this.test_wrapped_long);
    }

    out.writeDouble(this.test_double);

    if (this.test_wrapped_double == null) {
      out.writeIndex(1);
      out.writeNull();
    } else {
      out.writeIndex(0);
      out.writeDouble(this.test_wrapped_double);
    }

    if (this.test_string == null) {
      out.writeIndex(1);
      out.writeNull();
    } else {
      out.writeIndex(0);
      out.writeString(this.test_string);
    }

    long size0 = this.test_simple_list.size();
    out.writeArrayStart();
    out.setItemCount(size0);
    long actualSize0 = 0;
    for (java.lang.CharSequence e0: this.test_simple_list) {
      actualSize0++;
      out.startItem();
      if (e0 == null) {
        out.writeIndex(1);
        out.writeNull();
      } else {
        out.writeIndex(0);
        out.writeString(e0);
      }
    }
    out.writeArrayEnd();
    if (actualSize0 != size0)
      throw new java.util.ConcurrentModificationException("Array-size written was " + size0 + ", but element count was " + actualSize0 + ".");

    long size1 = this.test_complex_list.size();
    out.writeArrayStart();
    out.setItemCount(size1);
    long actualSize1 = 0;
    for (org.apache.beam.examples.avro.NestedObj e1: this.test_complex_list) {
      actualSize1++;
      out.startItem();
      e1.customEncode(out);
    }
    out.writeArrayEnd();
    if (actualSize1 != size1)
      throw new java.util.ConcurrentModificationException("Array-size written was " + size1 + ", but element count was " + actualSize1 + ".");

    long size2 = this.test_simple_map.size();
    out.writeMapStart();
    out.setItemCount(size2);
    long actualSize2 = 0;
    for (java.util.Map.Entry<java.lang.CharSequence, java.lang.Integer> e2: this.test_simple_map.entrySet()) {
      actualSize2++;
      out.startItem();
      out.writeString(e2.getKey());
      java.lang.Integer v2 = e2.getValue();
      out.writeInt(v2);
    }
    out.writeMapEnd();
    if (actualSize2 != size2)
      throw new java.util.ConcurrentModificationException("Map-size written was " + size2 + ", but element count was " + actualSize2 + ".");

    long size3 = this.test_complex_map.size();
    out.writeMapStart();
    out.setItemCount(size3);
    long actualSize3 = 0;
    for (java.util.Map.Entry<java.lang.CharSequence, org.apache.beam.examples.avro.NestedObj> e3: this.test_complex_map.entrySet()) {
      actualSize3++;
      out.startItem();
      out.writeString(e3.getKey());
      org.apache.beam.examples.avro.NestedObj v3 = e3.getValue();
      v3.customEncode(out);
    }
    out.writeMapEnd();
    if (actualSize3 != size3)
      throw new java.util.ConcurrentModificationException("Map-size written was " + size3 + ", but element count was " + actualSize3 + ".");

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      this.test_int = in.readInt();

      if (in.readIndex() != 0) {
        in.readNull();
        this.test_wrapped_int = null;
      } else {
        this.test_wrapped_int = in.readInt();
      }

      this.test_long = in.readLong();

      if (in.readIndex() != 0) {
        in.readNull();
        this.test_wrapped_long = null;
      } else {
        this.test_wrapped_long = in.readLong();
      }

      this.test_double = in.readDouble();

      if (in.readIndex() != 0) {
        in.readNull();
        this.test_wrapped_double = null;
      } else {
        this.test_wrapped_double = in.readDouble();
      }

      if (in.readIndex() != 0) {
        in.readNull();
        this.test_string = null;
      } else {
        this.test_string = in.readString(this.test_string instanceof Utf8 ? (Utf8)this.test_string : null);
      }

      long size0 = in.readArrayStart();
      java.util.List<java.lang.CharSequence> a0 = this.test_simple_list;
      if (a0 == null) {
        a0 = new SpecificData.Array<java.lang.CharSequence>((int)size0, SCHEMA$.getField("test_simple_list").schema());
        this.test_simple_list = a0;
      } else a0.clear();
      SpecificData.Array<java.lang.CharSequence> ga0 = (a0 instanceof SpecificData.Array ? (SpecificData.Array<java.lang.CharSequence>)a0 : null);
      for ( ; 0 < size0; size0 = in.arrayNext()) {
        for ( ; size0 != 0; size0--) {
          java.lang.CharSequence e0 = (ga0 != null ? ga0.peek() : null);
          if (in.readIndex() != 0) {
            in.readNull();
            e0 = null;
          } else {
            e0 = in.readString(e0 instanceof Utf8 ? (Utf8)e0 : null);
          }
          a0.add(e0);
        }
      }

      long size1 = in.readArrayStart();
      java.util.List<org.apache.beam.examples.avro.NestedObj> a1 = this.test_complex_list;
      if (a1 == null) {
        a1 = new SpecificData.Array<org.apache.beam.examples.avro.NestedObj>((int)size1, SCHEMA$.getField("test_complex_list").schema());
        this.test_complex_list = a1;
      } else a1.clear();
      SpecificData.Array<org.apache.beam.examples.avro.NestedObj> ga1 = (a1 instanceof SpecificData.Array ? (SpecificData.Array<org.apache.beam.examples.avro.NestedObj>)a1 : null);
      for ( ; 0 < size1; size1 = in.arrayNext()) {
        for ( ; size1 != 0; size1--) {
          org.apache.beam.examples.avro.NestedObj e1 = (ga1 != null ? ga1.peek() : null);
          if (e1 == null) {
            e1 = new org.apache.beam.examples.avro.NestedObj();
          }
          e1.customDecode(in);
          a1.add(e1);
        }
      }

      long size2 = in.readMapStart();
      java.util.Map<java.lang.CharSequence,java.lang.Integer> m2 = this.test_simple_map; // Need fresh name due to limitation of macro system
      if (m2 == null) {
        m2 = new java.util.HashMap<java.lang.CharSequence,java.lang.Integer>((int)size2);
        this.test_simple_map = m2;
      } else m2.clear();
      for ( ; 0 < size2; size2 = in.mapNext()) {
        for ( ; size2 != 0; size2--) {
          java.lang.CharSequence k2 = null;
          k2 = in.readString(k2 instanceof Utf8 ? (Utf8)k2 : null);
          java.lang.Integer v2 = null;
          v2 = in.readInt();
          m2.put(k2, v2);
        }
      }

      long size3 = in.readMapStart();
      java.util.Map<java.lang.CharSequence,org.apache.beam.examples.avro.NestedObj> m3 = this.test_complex_map; // Need fresh name due to limitation of macro system
      if (m3 == null) {
        m3 = new java.util.HashMap<java.lang.CharSequence,org.apache.beam.examples.avro.NestedObj>((int)size3);
        this.test_complex_map = m3;
      } else m3.clear();
      for ( ; 0 < size3; size3 = in.mapNext()) {
        for ( ; size3 != 0; size3--) {
          java.lang.CharSequence k3 = null;
          k3 = in.readString(k3 instanceof Utf8 ? (Utf8)k3 : null);
          org.apache.beam.examples.avro.NestedObj v3 = null;
          if (v3 == null) {
            v3 = new org.apache.beam.examples.avro.NestedObj();
          }
          v3.customDecode(in);
          m3.put(k3, v3);
        }
      }

    } else {
      for (int i = 0; i < 11; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          this.test_int = in.readInt();
          break;

        case 1:
          if (in.readIndex() != 0) {
            in.readNull();
            this.test_wrapped_int = null;
          } else {
            this.test_wrapped_int = in.readInt();
          }
          break;

        case 2:
          this.test_long = in.readLong();
          break;

        case 3:
          if (in.readIndex() != 0) {
            in.readNull();
            this.test_wrapped_long = null;
          } else {
            this.test_wrapped_long = in.readLong();
          }
          break;

        case 4:
          this.test_double = in.readDouble();
          break;

        case 5:
          if (in.readIndex() != 0) {
            in.readNull();
            this.test_wrapped_double = null;
          } else {
            this.test_wrapped_double = in.readDouble();
          }
          break;

        case 6:
          if (in.readIndex() != 0) {
            in.readNull();
            this.test_string = null;
          } else {
            this.test_string = in.readString(this.test_string instanceof Utf8 ? (Utf8)this.test_string : null);
          }
          break;

        case 7:
          long size0 = in.readArrayStart();
          java.util.List<java.lang.CharSequence> a0 = this.test_simple_list;
          if (a0 == null) {
            a0 = new SpecificData.Array<java.lang.CharSequence>((int)size0, SCHEMA$.getField("test_simple_list").schema());
            this.test_simple_list = a0;
          } else a0.clear();
          SpecificData.Array<java.lang.CharSequence> ga0 = (a0 instanceof SpecificData.Array ? (SpecificData.Array<java.lang.CharSequence>)a0 : null);
          for ( ; 0 < size0; size0 = in.arrayNext()) {
            for ( ; size0 != 0; size0--) {
              java.lang.CharSequence e0 = (ga0 != null ? ga0.peek() : null);
              if (in.readIndex() != 0) {
                in.readNull();
                e0 = null;
              } else {
                e0 = in.readString(e0 instanceof Utf8 ? (Utf8)e0 : null);
              }
              a0.add(e0);
            }
          }
          break;

        case 8:
          long size1 = in.readArrayStart();
          java.util.List<org.apache.beam.examples.avro.NestedObj> a1 = this.test_complex_list;
          if (a1 == null) {
            a1 = new SpecificData.Array<org.apache.beam.examples.avro.NestedObj>((int)size1, SCHEMA$.getField("test_complex_list").schema());
            this.test_complex_list = a1;
          } else a1.clear();
          SpecificData.Array<org.apache.beam.examples.avro.NestedObj> ga1 = (a1 instanceof SpecificData.Array ? (SpecificData.Array<org.apache.beam.examples.avro.NestedObj>)a1 : null);
          for ( ; 0 < size1; size1 = in.arrayNext()) {
            for ( ; size1 != 0; size1--) {
              org.apache.beam.examples.avro.NestedObj e1 = (ga1 != null ? ga1.peek() : null);
              if (e1 == null) {
                e1 = new org.apache.beam.examples.avro.NestedObj();
              }
              e1.customDecode(in);
              a1.add(e1);
            }
          }
          break;

        case 9:
          long size2 = in.readMapStart();
          java.util.Map<java.lang.CharSequence,java.lang.Integer> m2 = this.test_simple_map; // Need fresh name due to limitation of macro system
          if (m2 == null) {
            m2 = new java.util.HashMap<java.lang.CharSequence,java.lang.Integer>((int)size2);
            this.test_simple_map = m2;
          } else m2.clear();
          for ( ; 0 < size2; size2 = in.mapNext()) {
            for ( ; size2 != 0; size2--) {
              java.lang.CharSequence k2 = null;
              k2 = in.readString(k2 instanceof Utf8 ? (Utf8)k2 : null);
              java.lang.Integer v2 = null;
              v2 = in.readInt();
              m2.put(k2, v2);
            }
          }
          break;

        case 10:
          long size3 = in.readMapStart();
          java.util.Map<java.lang.CharSequence,org.apache.beam.examples.avro.NestedObj> m3 = this.test_complex_map; // Need fresh name due to limitation of macro system
          if (m3 == null) {
            m3 = new java.util.HashMap<java.lang.CharSequence,org.apache.beam.examples.avro.NestedObj>((int)size3);
            this.test_complex_map = m3;
          } else m3.clear();
          for ( ; 0 < size3; size3 = in.mapNext()) {
            for ( ; size3 != 0; size3--) {
              java.lang.CharSequence k3 = null;
              k3 = in.readString(k3 instanceof Utf8 ? (Utf8)k3 : null);
              org.apache.beam.examples.avro.NestedObj v3 = null;
              if (v3 == null) {
                v3 = new org.apache.beam.examples.avro.NestedObj();
              }
              v3.customDecode(in);
              m3.put(k3, v3);
            }
          }
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










